/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.lxisoft.library.client.library.api;

import com.lxisoft.library.client.library.model.Category;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-05-28T12:22:48.432+05:30[Asia/Kolkata]")

@Api(value = "CategoryResource", description = "the CategoryResource API")
public interface CategoryResourceApi {

    @ApiOperation(value = "createCategory", nickname = "createCategoryUsingPOST", notes = "", response = Category.class, tags={ "category-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Category.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/categories",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Category> createCategoryUsingPOST(@ApiParam(value = "category" ,required=true )  @Valid @RequestBody Category category);


    @ApiOperation(value = "deleteCategory", nickname = "deleteCategoryUsingDELETE", notes = "", tags={ "category-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/api/categories/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCategoryUsingDELETE(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "getAllCategories", nickname = "getAllCategoriesUsingGET", notes = "", response = Category.class, responseContainer = "List", tags={ "category-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Category.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/categories",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<Category>> getAllCategoriesUsingGET();


    @ApiOperation(value = "getCategory", nickname = "getCategoryUsingGET", notes = "", response = Category.class, tags={ "category-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Category.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/categories/{id}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Category> getCategoryUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "updateCategory", nickname = "updateCategoryUsingPUT", notes = "", response = Category.class, tags={ "category-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Category.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/categories",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<Category> updateCategoryUsingPUT(@ApiParam(value = "category" ,required=true )  @Valid @RequestBody Category category);

}
