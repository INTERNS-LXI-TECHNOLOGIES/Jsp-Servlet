/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.lxisoft.inventory.client.default.api;

import com.lxisoft.inventory.client.default.model.Sale;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-05-27T10:21:09.062+05:30[Asia/Kolkata]")

@Api(value = "SaleResource", description = "the SaleResource API")
public interface SaleResourceApi {

    @ApiOperation(value = "createSale", nickname = "createSaleUsingPOST", notes = "", response = Sale.class, tags={ "sale-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Sale.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/sales",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Sale> createSaleUsingPOST(@ApiParam(value = "sale" ,required=true )  @Valid @RequestBody Sale sale);


    @ApiOperation(value = "deleteSale", nickname = "deleteSaleUsingDELETE", notes = "", tags={ "sale-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/api/sales/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteSaleUsingDELETE(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "getAllSales", nickname = "getAllSalesUsingGET", notes = "", response = Sale.class, responseContainer = "List", tags={ "sale-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Sale.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/sales",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<Sale>> getAllSalesUsingGET(@ApiParam(value = "eagerload", defaultValue = "false") @Valid @RequestParam(value = "eagerload", required = false, defaultValue="false") Boolean eagerload);


    @ApiOperation(value = "getSale", nickname = "getSaleUsingGET", notes = "", response = Sale.class, tags={ "sale-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Sale.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/sales/{id}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Sale> getSaleUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "updateSale", nickname = "updateSaleUsingPUT", notes = "", response = Sale.class, tags={ "sale-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Sale.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/sales",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<Sale> updateSaleUsingPUT(@ApiParam(value = "sale" ,required=true )  @Valid @RequestBody Sale sale);

}
