/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.lxisoft.inventory.client.default.api;

import com.lxisoft.inventory.client.default.model.KeyAndPasswordVM;
import com.lxisoft.inventory.client.default.model.ManagedUserVM;
import com.lxisoft.inventory.client.default.model.PasswordChangeDTO;
import com.lxisoft.inventory.client.default.model.UserDTO;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-05-27T10:21:09.062+05:30[Asia/Kolkata]")

@Api(value = "AccountResource", description = "the AccountResource API")
public interface AccountResourceApi {

    @ApiOperation(value = "activateAccount", nickname = "activateAccountUsingGET", notes = "", tags={ "account-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/activate",
        method = RequestMethod.GET)
    ResponseEntity<Void> activateAccountUsingGET(@NotNull @ApiParam(value = "key", required = true) @Valid @RequestParam(value = "key", required = true) String key);


    @ApiOperation(value = "changePassword", nickname = "changePasswordUsingPOST", notes = "", tags={ "account-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/account/change-password",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> changePasswordUsingPOST(@ApiParam(value = "passwordChangeDto" ,required=true )  @Valid @RequestBody PasswordChangeDTO passwordChangeDTO);


    @ApiOperation(value = "finishPasswordReset", nickname = "finishPasswordResetUsingPOST", notes = "", tags={ "account-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/account/reset-password/finish",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> finishPasswordResetUsingPOST(@ApiParam(value = "keyAndPassword" ,required=true )  @Valid @RequestBody KeyAndPasswordVM keyAndPasswordVM);


    @ApiOperation(value = "getAccount", nickname = "getAccountUsingGET", notes = "", response = UserDTO.class, tags={ "account-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserDTO.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/account",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<UserDTO> getAccountUsingGET();


    @ApiOperation(value = "isAuthenticated", nickname = "isAuthenticatedUsingGET", notes = "", response = String.class, tags={ "account-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/authenticate",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<String> isAuthenticatedUsingGET();


    @ApiOperation(value = "registerAccount", nickname = "registerAccountUsingPOST", notes = "", tags={ "account-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/register",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> registerAccountUsingPOST(@ApiParam(value = "managedUserVM" ,required=true )  @Valid @RequestBody ManagedUserVM managedUserVM);


    @ApiOperation(value = "requestPasswordReset", nickname = "requestPasswordResetUsingPOST", notes = "", tags={ "account-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/account/reset-password/init",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> requestPasswordResetUsingPOST(@ApiParam(value = "mail" ,required=true )  @Valid @RequestBody String body);


    @ApiOperation(value = "saveAccount", nickname = "saveAccountUsingPOST", notes = "", tags={ "account-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/account",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> saveAccountUsingPOST(@ApiParam(value = "userDTO" ,required=true )  @Valid @RequestBody UserDTO userDTO);

}
