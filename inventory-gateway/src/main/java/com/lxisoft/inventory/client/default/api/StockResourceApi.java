/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.lxisoft.inventory.client.default.api;

import com.lxisoft.inventory.client.default.model.Stock;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-05-27T10:21:09.062+05:30[Asia/Kolkata]")

@Api(value = "StockResource", description = "the StockResource API")
public interface StockResourceApi {

    @ApiOperation(value = "createStock", nickname = "createStockUsingPOST", notes = "", response = Stock.class, tags={ "stock-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Stock.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/stocks",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Stock> createStockUsingPOST(@ApiParam(value = "stock" ,required=true )  @Valid @RequestBody Stock stock);


    @ApiOperation(value = "deleteStock", nickname = "deleteStockUsingDELETE", notes = "", tags={ "stock-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/api/stocks/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteStockUsingDELETE(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "getAllStocks", nickname = "getAllStocksUsingGET", notes = "", response = Stock.class, responseContainer = "List", tags={ "stock-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Stock.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/stocks",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<Stock>> getAllStocksUsingGET();


    @ApiOperation(value = "getStock", nickname = "getStockUsingGET", notes = "", response = Stock.class, tags={ "stock-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Stock.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/stocks/{id}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Stock> getStockUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "updateStock", nickname = "updateStockUsingPUT", notes = "", response = Stock.class, tags={ "stock-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Stock.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/stocks",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<Stock> updateStockUsingPUT(@ApiParam(value = "stock" ,required=true )  @Valid @RequestBody Stock stock);

}
